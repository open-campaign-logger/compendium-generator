@page "/fetchwebpage"
@using CampaignKit.Compendium.Helper.Data
@inject DownloadService downloadService
@inject MarkdownService markdownService
@inject HtmlService htmlService
@inject IJSRuntime jsRuntime

<!-- Import SimpleMD -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css">
<script src="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js"></script>

<style>
    .CodeMirror {
        height: 700px;
    }
</style>

<script>

    // Interop functions for the SimpleMDE control.
    window.simpleMDEInterop = {

        // Sets the value of window.simplemde to the markdown string passed in as an argument.
        setMarkdown: function (markdown) {
            // Log the markdown value
            console.log("Setting markdown:", markdown.substring(0, 50) + (markdown.length > 50 ? "..." : ""));  // Log the first 50 characters of markdown value, add "..." if there's more
            if (!window.simplemde) {
                // Create a new instance of the SimpleMDE library and assign it to the window.simplemde variable
                // Get the element with the id of 'markdownEditor' and assign it to the SimpleMDE instance
                window.simplemde = new SimpleMDE({
                    element: document.getElementById('markdownEditor'),
                    // Add a toolbar to this editor with all available toolbar icons except the preview, side-by-side and fullscreen.
                    toolbar: ["bold", "italic", "heading-smaller", "heading-bigger", "code", "quote", "unordered-list", "ordered-list", "clean-block", "link", "image", "table", "horizontal-rule", "preview"]
                });
            }
            // Set the value of window.simplemde to the markdown string
            window.simplemde.value(markdown);
        }
    };

    // Interop functions for the Web Browser control.
    window.webPreviewInterop = {

        // Sets the source of an iframe element to the given URL.
        setHtml: function (htmlContent) {
            // Log the call
            console.log("Setting html:", htmlContent.substring(0, 50) + (htmlContent.length > 50 ? "..." : ""));  // Log the first 50 characters of the html value, add "..." if there's more
            // Get the iframe element by its id
            var iframe = document.getElementById('webPreview');
            // Set the source of the iframe to the given url
            iframe.setAttribute('srcdoc', htmlContent);
        }
    };

    // Sets the HTML content of the markdown preview element.
    window.markdownPreviewInterop = {

        //This function sets the HTML content of the element with the ID 'markdownPreview' to the given htmlContent parameter.
        setMarkdown: function (markdownContent) {
            // Log the call
            console.log("Setting markdown:", markdownContent.substring(0, 50) + (markdownContent.length > 50 ? "..." : ""));  // Log the first 50 characters of the html value, add "..." if there's more
            // Get the component element by its id
            var markdownPreview = document.getElementById('markdownPreview');
            // Set the source of the component with the provided content
            markdownPreview.innerHTML = markdownContent;
        }
    };

</script>

<PageTitle>Compendium Helper</PageTitle>

<h1>Compendium Helper</h1>

<p>This component demonstrates fetching data from a service.</p>

<div class="row">
    <div class="col-md-12">
        <input type="text" @bind="url" placeholder="Enter web page URL" class="form-control" />
        <button @onclick="LoadWebPageContent" class="btn btn-primary mt-2">Load</button>
    </div>
</div>

<div class="row mt-4" style="align-items: stretch;">
    <!-- Markdown Editor Column -->
    <div class="col-md-6" style="display: flex; flex-direction: column;">
        <textarea id="markdownEditor" class="form-control" style="flex-grow: 1; overflow: auto; box-sizing: border-box;"></textarea>
    </div>

    <!-- Web View -->
    <div class="col-md-6" style="display: flex; flex-direction: column;">
        <iframe id="webPreview" style="width: 100%; height: 700px; overflow: auto; box-sizing: border-box;"></iframe>
    </div>

</div>

@code {

    private string url = "https://www.woinrules.com/characters/derived-statistics";

    /// <summary>
    /// Loads the content of a web page, converts it to markdown and sets it.
    /// </summary>
    /// <returns>
    /// A task that represents the asynchronous operation.
    /// </returns>
    private async Task LoadWebPageContent()
    {
        // Set the markdown to "Loading..."
        await SetMarkdownAsync("# Loading...");

        // Download the web page from the given URL
        var html = await downloadService.GetWebPage(url);

        // Update the iframe's source to the current URL
        await SetWebPreviewAsync(html);

        // Set the markdown to "Converting..."
        await SetMarkdownAsync("# Converting...");

        // Convert the HTML to markdown
        var markdown = markdownService.ConvertHtmlToMarkdown(html);

        // Set the markdown to the converted markdown
        await SetMarkdownAsync(markdown);
    }

    /// <summary>
    /// Sets the markdown preview using the given markdown string.
    /// </summary>
    /// <param name="markdown">The markdown string to be used for the preview.</param>
    /// <returns>
    /// An asynchronous task that represents the operation.
    /// </returns>
    private async Task SetMarkdownPreviewAsync(string markdown)
    {
        await jsRuntime.InvokeVoidAsync("window.markdownPreviewInterop.setMarkdown", markdown);
    }

    /// <summary>
    /// Sets the HTML of the browser control.
    /// </summary>
    /// <param name="html">The HTML to set.</param>
    /// <returns>
    /// An asynchronous task that represents the operation.
    /// </returns>
    private async Task SetWebPreviewAsync(string html)
    {
        await jsRuntime.InvokeVoidAsync("window.webPreviewInterop.setHtml", html);
    }

    /// <summary>
    /// Sets the markdown content of the SimpleMDE editor.
    /// </summary>
    /// <param name="markdown">The markdown content to set.</param>
    /// <returns>
    /// An asynchronous task that represents the operation.
    /// </returns>
    private async Task SetMarkdownAsync(string markdown)
    {
        await jsRuntime.InvokeVoidAsync("window.simpleMDEInterop.setMarkdown", markdown);
    }

    /// <summary>
    /// Asynchronously invokes the JavaScript function to get the markdown from the SimpleMDE editor.
    /// </summary>
    /// <returns>
    /// A task that represents the asynchronous operation.
    /// </returns>
    private async Task GetMarkdownAsync()
    {
        await jsRuntime.InvokeVoidAsync("window.simpleMDEInterop.getMarkdown");
    }
}
