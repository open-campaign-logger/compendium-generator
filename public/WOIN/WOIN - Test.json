{
  "version": 2,
  "type": "campaign",
  "original": null,
  "title": "WOIN - Test",
  "description": "What's Old is new Again (WOIN) SRD material.'.",
  "imageUrl": "",
  "campaignEntries": [
    {
      "rawText": "",
      "rawPublic": "# License\r\nThis page is the introduction to the WOIN Rules Reference Document (WRRD), and is a developer tool. If you are looking for an introduction to the game as a potential player, [click here instead](http://www.woinrpg.com/about-whats-old-is-new).\r\n\r\nThis document contains the rules in their basic form.  It does not include explanations, descriptions, examples, guidelines, and all the other material that makes up the core rulebooks.\r\n\r\n## \r\n\r\nWOIN Rules Reference Document v1.2 (OGL)\r\n\r\nThis entire WOIN Rules Reference Document and the Bestiary is designated  Open Gaming Content except for:\r\n\r\n- Artwork and logos.\r\n- The names WOIN, OLD, NEW, NOW, What's OLD is NEW, EN Publishing, EN World, and any product names.\r\n- Any trademarks or names of real world items, brands, or entities.\r\n- The names of characters, places, and settings.\r\n\r\nYou may freely use this material in your own publications, fan creations, tools, or websites subject to the terms of the OGL v1.0a.\r\n\r\n## \r\n\r\nWOIN Rules Reference Document v1.2 (CC)\r\n\r\nThis entire WOIN Rules Reference Document and the Bestiary  is provided to you free of charge under the terms of the Creative Commons Attribution 4.0 International License (CC-BY-4.0) except for:\r\n\r\n- Artwork and logos.\r\n- The names WOIN, OLD, NEW, NOW, What's OLD is NEW, EN Publishing, EN World, and any product names.\r\n- Any trademarks or names of real world items, brands, or entities.\r\n- The names of characters, places, and settings.\r\n\r\nYou are free to use this content in any manner permitted by that license as long as you include the following attribution statement in your own work:\r\n\r\nThis work includes material taken from the WOIN Rules Reference Document (WRRD) by EN Publishing and available at https://www.woinrules.com, based on the What's OLD is NEW (WOIN) game system available at https://www.woinrpg.com. The WRRD is licensed under the Creative Commons Attribution 4.0 International License available at https://creativecommons.org/licenses/by/4.0/legalcode.\r\n\r\nSection 5 of CC-BY-4.0 includes a Disclaimer of Warranties and Limitation of Liability that limits our liability to you.\r\n\r\n## \r\n\r\nWOIN Rules Reference Document v1.2 (ORC)\r\n\r\n### \r\n\r\nORC Notice\r\n\r\nThe WOIN Rules Reference Document is licensed under the ORC License held in the Library of Congress at TX000[number tbd] and available online at various locations including http://www.a5esrd.com and others. All warranties are disclaimed as set forth therein.\r\n\r\n### \r\n\r\nAttribution\r\n\r\nIf you use our Licensed Material in your own published work, please credit us in your product as follows:\r\n\r\nWOIN Rules Reference Document, © EN Publishing, http://www.woinrules.com; based on the What's OLD is NEW roleplaying game system by Russ Morrissey, http://www.woinrpg.com.\r\n\r\n### \r\n\r\nReserved Material\r\n\r\nReserved Material elements in this product include:\r\n\r\n- Artwork and logos.\r\n- The names WOIN, OLD, NEW, NOW, What's OLD is NEW, EN Publishing, EN World, and any product names.\r\n- Any trademarks or names of real world items, brands, or entities.\r\n- The names of characters, places, and settings.\r\n\r\n## \r\n\r\nWhat This Is And What It Isn't\r\n\r\nThis document is a tool for third party developers. It can also be used as a reference tool for people playing WOIN games. However, it is not a subsitute for the actual rulebooks, and lacks much of the descriptive or contextual text which accompanies the rules. For this reason, it may be difficult to learn the rules only using this document.\r\n\r\n## \r\n\r\nEquipment\r\n\r\nEquipment and starships are found separately on the [WOINGEAR website](http://www.woingear.com).\r\n",
      "labels": [
        "WOIN",
        "License"
      ],
      "tagSymbol": "~",
      "tagValue": "License"
    },
    {
      "rawText": "",
      "rawPublic": "# Rule - Countdowns\r\nA countdown takes place when there is an unknown time limit before something occurs. It is used in the following situations:\r\n\r\n- Death. An unconscious character uses the countdown mechanic as he slips towards death.\r\n- Illness. Disease and illness use the countdown mechanic as symptoms worsen.\r\n- Drowning or suffocation. Characters who cannot breath (underwater, or some other reason) use the countdown mechanic to determine when they lose consciousness.\r\n- Starship explosions. In N.E.W., badly damaged starships use a countdown pool to determine when they explode; hopefully the heroes can escape the ship before it does!\r\n- Other ticking clocks.There are many other situations where a ticking clock is relevant. Occasions where you need a tense situation as a character tries to do something before something else happens are ideal for it. Can a climber scale a crumbling cliff before it collapses? Can a thief pick a lock before the magical alarms go off? Can a Smallfolk burglar recover the magic goblet and escape the dragon's lair before it wakes up?\r\n\r\nThe countdown is started by forming a dice pool. Different situations will determine the size of that dice pool – a dying character uses one equal in size to his ENDURANCE dice pool, for example, while cliffs or magical alarms will have their dice pool size set by the GM. The larger the dice pool, the longer you – probably! - have.\r\n\r\nEach turn, the dice pool is rolled. Usually it's rolled by the player in question – she rolls her own death dice, or her own drowning dice.\r\n\r\nAny dice which comes up with a six is removed from the dice pool, and play continues.\r\n\r\nEventually the last dice will be removed from the dice pool. It is then that the character dies, the trap explodes, or the soldier looks in the crate.\r\n",
      "labels": [
        "WOIN"
      ],
      "tagSymbol": "~",
      "tagValue": "Rule - Countdowns"
    },
    {
      "rawText": "",
      "rawPublic": "# Rule - Dice Pools\r\n## \r\n\r\nCore Mechanic\r\n\r\nThe core resolution mechanic of the game is a dice pool based attribute check. Actions, including attacks, are performed by making attribute checks.  To make an attribute check, form a dice pool and attempt to beat a difficulty benchmark set by the GM.\r\n\r\n## \r\n\r\nMaximum Dice Pool\r\n\r\nThe maximum dice pool that a character can form is based on their grade.  A starting character can form a dice pool of up to 5d6. Additional grades add to this maximum pool size.\r\n\r\n![](https://lh6.googleusercontent.com/V3rcMsJ5w6nv6rBmSwKZAzAiH6Vij4hmb5rHQsrDdiAwNRuRuwWbDd9J1PhwkH2ErSubSdkRYSHW-B7hwueyRWO9n4dZFGADUHoVlreuvZhJzcdj=w1280)\r\n",
      "labels": [
        "WOIN",
        "Rule"
      ],
      "tagSymbol": "~",
      "tagValue": "Rule - Dice Pools"
    },
    {
      "rawText": "",
      "rawPublic": "# Rule - Difficulty Benchmarks\r\nThere are two types of difficulty benchmark: simple and acccurate. Simple benchmarks are easier to use in-play, while accurate benchmarks are better for more simulationist games.\r\n\r\n## \r\n\r\nSimple Benchmarks\r\n",
      "labels": [
        "WOIN",
        "Rule"
      ],
      "tagSymbol": "~",
      "tagValue": "Rule - Difficulty Benchmarks"
    },
    {
      "rawText": "",
      "rawPublic": "# Rule - Luck\r\nLUCK is a special attribute. It is used as a replenishable resource which can modify other die rolls and perform special actions. It represents luck, fate, chance, destiny faith, divine favor, karma, and more. Luck can be interpreted in any way by characters and creatures who use it. For some, it is merely coincidence and serendipity; for others it represents cool and mojo; while for still others it may be divine in origin, representing faith and blessings. However the character interprets the concept of luck, it is used in the same way.\r\n\r\nEach player should form a LUCK dice pool.  As dice are used from the LUCK pool, simply discard them.  LUCK can be used to:\r\n\r\n1. Add dice to any attribute check on a 1:1 basis.\r\n2. Deduct dice from someone else's attribute check on a 1:1 basis.\r\n3. Absorb damage on a 1:1 basis (roll as many LUC dice as you wish, and deduct the total from the damage).\r\n4. Add dice to a damage roll on a 1:1 basis.\r\n5. Gain one bonus action per turn by spending a LUC die. This can only happen during a character’s own turn.\r\n6. Ignore an inflicted temporary condition as a reaction to the effect which causes it.\r\n7. Perform other special actions granted by careers and exploits.\r\n\r\nLUC dice can only be used within an encounter; you cannot use LUC dice during downtime, or on daily checks. And the GM should disallow the use of LUC if she feels that a player is simply blowing all their LUCk on a check because it’s the only one they’ll make that day. In game terms, being able to invest all your LUC in one go makes sense only if you’ve had, or will have, a number of other chances to be unlucky in the day (you’ve either saved up a lucky moment or will have a chance to “pay it back”).\r\n\r\n## \r\n\r\nExploding Dice\r\n\r\nLUCK dice \"explode\".  This means that whenever a 6 is rolled, the die is rolled again and the new roll added to the original 6.  This process is repeated if subsequent 6s are rolled. It is recommended that LUCK dice be a different color to other dice so that they can be easily distinguished.\r\n\r\n## \r\n\r\nLeadership\r\n\r\nThe Leadership exploit allows you to donate your LUC dice to others. Without this exploit, you may only spend LUC on yourself. Characters with the Leadership exploit may donate one or more of their available LUC dice to another character as a free reaction to their attempting an attribute check. You must declare this before the ally rolls their check.\r\n\r\n## \r\n\r\nReplenishing LUCK\r\n\r\nOnce per day, a character may replenish his LUCK pool. Some careers or traditions allow for an additional replenishment; these do not stack, and you cannot gain more than one additional daily replenishment.\r\n\r\n## \r\n\r\nOther Uses of LUCK\r\n\r\nOther uses of LUCK manipulate situations where the odds are normally even.\r\n\r\n1. When determining a 50/50 chance of an outcome, roll a Routine [10] LUCK check instead.  Characters with higher LUCK succeed more often on an ostensibly 50/50 chance.\r\n2. When randomly determining a PC, have each player roll LUCK.  Either the highest or the lowest wins, depending on the situation.\r\n",
      "labels": [
        "WOIN",
        "Rule"
      ],
      "tagSymbol": "~",
      "tagValue": "Rule - Luck"
    },
    {
      "rawText": "",
      "rawPublic": "# Rule - Movement\r\nMovement is a vital part of any combat encounter. Any creature can use one action to move up to its SPEED. A creature’s SPEED indicates the number of 5-foot increments (squares) it can move in one action (it also indicates its normal speed in miles-per-hour).\r\n\r\nSPEED is the total of the raw dice pool of STRENGTH and AGILITY plus one relevant skill.  Movement skills include (but are not limited to) running, climbing, swimming, flying, and zero-g.\r\n\r\n- Movement methods. For non-primary movement methods, the movement rate is halved.  For most characters, this means that walking/running is at the full rate, and climbing, swimming, zero-g, etc. are at half rate (after adding the bonus from the skill).  Some exploits may grant a full movement rate.  Some creatures (such as birds) may have a different primary movement mode, and walk/run at half speed. A skill cannot turn a movement method into a primary method; only an exploit can do that.\r\n- Hustling. A character who moves with two actions in a turn is “hustling,” and effectively moving at twice its normal speed. Creatures with more than two actions available may not move more than twice in a turn. An Olympic sprinter typically has a SPEED of 10 or more, and is using both actions to run, resulting in movement in the range of 20 miles per hour.\r\n- Difficult terrain. Difficult terrain (deep snow, swamp, ice, high or low gravity, etc.) halves ground movement rates. Some exploits may allow full movement rates on one or more difficult terrain types.\r\n- Vehicles. A vehicle's SPEED is also its maximum speed in tens of miles per hour. A vehicle with a SPEED of 12 has a maximum speed of 120mph.\r\n- Diagonal movement. If a square grid is being used, a diagonal movement counts as 5’, but creatures may not move diagonally around a corner.\r\n- Climbing and balancing. Climbing is an AGI check. A successful check allows the climber to move at her climb speed up a vertical surface. The climber need only make one check per turn—this check applies to all climbing movement in that turn. Balancing on a narrow ledge or beam is a form of climbing. A failed check simply means that the character cannot climb the wall or object. She may attempt another check next turn. A high quality climbing kit can assist with climbing. The surface determines the difficulty of the climb.\r\n\r\nSurface \t\t\t\t\t\t\t\tDifficulty\r\n\r\nCliff, rough, many handholds \t\tChallenging [13]\r\n\r\nBrick or stone wall, few handholds \tDifficult [16]\r\n\r\nIce or smooth metal \t\t\t\t\tDemanding [21]\r\n\r\nOverhand or ceiling \t\t\t\t\tDemanding [21]\r\n\r\nNarrow ledge or plank \t\t\t\tChallenging [13]\r\n\r\nTightrope \t\t\t\t\t\t\t\tStrenuous [25]\r\n\r\nFighting while climbing. Fighting while hanging from a wall is difficult. A non-climber attacking a climber gains a +2d6 bonus to the attack. A climber attacking a nonclimber suffers a –2d6 penalty. If both combatants are climbing, nobody gets any bonuses or penalties.\r\n\r\nCreatures with primary climbing modes. If a creature has climbing as a natural movement mode, it simply moves its Speed along walls and ceilings with no checks requires or combat checks imposed.\r\n\r\nFalling. Characters who fall from a height take 1d6 damage for every 10’ fallen. (Falls of less than 10’ do not cause damage.) Any fall results in the character landing prone unless an AGI check with a difficulty value equal to the number of feet fallen is made (this represents an attempt to reduce falling damage by jumping down; see below).\r\n\r\nJumping. Every character and creature has a “free” Jump allowance noted on its character sheet or stat block. This is a distance that the character may make a running jump without making any check at all; it simply happens automatically (for a standing jump, simply half the values). A jump counts as one action.\r\n",
      "labels": [
        "WOIN",
        "Rule"
      ],
      "tagSymbol": "~",
      "tagValue": "Rule - Movement"
    },
    {
      "rawText": "",
      "rawPublic": "# Skill - Alchemy\r\nCommon skills: alchemy\r\n\r\nAlchemy is a simple extended task. Using LOGIC and various skills, characters can accomplish a variety of things. Any character can attempt to use alchemy in order to solve a problem or achieve a goal. Alchemy often involves at least a touch of magic. As an extended skill task, alchemy is used for more mundane chemical purposes. Examples of mundane uses of alchemy include:\r\n\r\n- Removing a permanent condition.\r\n- Melting a lock with acid.\r\n- Treating a disease.\r\n- Create a strong glue.\r\n- Creating a poison or an antidote (for poisons, an opposed task is needed vs. the target’s Defense, assuming the poison can be delivered in food or drink; it does 2d6 poison damage plus 1d6 for each complexity level used, which means that the longer you spend making a poison, the more deadly it is).\r\n- Burn or combust materials like metal and stone.\r\n\r\nLike herbs, alchemical concoctions can also be used to inflict conditions, thus creating a love potion or a sleep draught. The concoction must be delivered (imbibed by the target, or similar). A concoction which is eaten or drunk is an hourly task, a poultice, salve, or ointment is a daily task, and a gas, incense, or smoke is a weekly task.\r\n\r\nThe traditional, legendary uses of alchemy (transforming lead into gold, or creating an elixir of immortality) are covered in the magic rules.\r\n\r\nIf the concoction needs a duration (such as an antidote that will protect the imbiber from a certain poison), the duration equals one time increment of the extended task. Characters can choose to increase the tasks’s complexity (say, from hourly to daily) in order to gain a longer duration.\r\n\r\nThe check is a simple opposed one vs. the target’s Defense or Mental Defense, and success inflicts a condition, with a critical success inflicting a severe condition.\r\n\r\nThe players start by declaring their intentions. This goal may be anything they wish, although they may find some goals too hard to accomplish. It might be to devise an acid to melt the lock on a cell door, save an ally who has been turned to stone by a gorgon, or build an explosive. The GM sets the difficulty as normal, and characters may attempt LOGIC checks until they have reached the target number of successes (typically three successes). The complexity and duration of the task are established as normal. Alchemy is a classic example of a very simple use of the extended task mechanism.\r\n\r\nAlchemy is an acceptable way to accomplish many tasks, even if other methods are available. A locked door can be picked or hacked by a burglar, or an alchemist might attempt to open it by melting the lock with alchemical acid. The difficulty of the task does not change—if it’s a Difficult [16] task to pick the lock, then it’s a Difficult [16] alchemical task also.\r\n",
      "labels": [
        "WOIN",
        "Skill"
      ],
      "tagSymbol": "~",
      "tagValue": "Skill - Alchemy"
    },
    {
      "rawText": "",
      "rawPublic": "# Skill - Chases\r\nCommon skills: running, driving, piloting, jumping, climbing, stealth, bluffing, swimming.\r\n\r\nA chase is an opposed extended task. The first to reach six wins is the winner of a chase situation (although the GM can modify this for longer or shorter chases). Multiple people can be involved in a chase, each making their own checks.\r\n\r\nA simple foot chase simply involves STR or AGI checks, along with the running skill. A vehicle chase may instead use AGI and driving, or a starfighter chase may use AGI and piloting.\r\n\r\nA more complex chase involves other skills. The target chooses the action (they might elect to climb a wall, dive into an asteroid field, jump a canyon, and so on), and the pursuers must match it. Examples of actions can be seen below.\r\n",
      "labels": [
        "WOIN",
        "Skill"
      ],
      "tagSymbol": "~",
      "tagValue": "Skill - Chases"
    },
    {
      "rawText": "",
      "rawPublic": "# Skill - Chemistry\r\nCommon skills: chemistry\r\n\r\nChemistry is usually an hourly extended task. Using LOGIV and various skills, characters can accomplish a variety of things. Any character can attempt to use chemistry in order to solve a problem or achieve a goal. Examples of uses of chemistry include:\r\n\r\n- Removing a permanent condition.\r\n- Melting a lock with acid.\r\n- Treating a disease.\r\n- Creating a strong glue.\r\n- Creating a poison or an antidote (for poisons, an opposed task is needed versus the target’s Vital Defense, assuming the poison can be delivered in food or drink; it does 1d6 poison damage plus 1d6 for each die you sacrifice from your dice pool.\r\n- Burn or combust materials like metal and stone. Like drugs, chemical concoctions can also be used to inflict conditions, thus creating a truth drug or a sleeping draught. The concoction must be delivered (imbibed by the target, or similar). A concoction which is eaten or drunk is an hourly task, a poultice, salve, or ointment costs -1d6, and a gas, incense, or smoke costs -2d6. The check is a simple opposed one versus the target’s Vital Defense, and success inflicts a condition with a critical success inflicting a severe condition.\r\n\r\nThe player(s) start by declaring their intentions. This goal may be anything they wish, although they may find some goals too hard to accomplish. It might be to devise an acid to melt the lock on a cell door, save an ally who has been poisoned by an assassin, or build an explosive. The GM sets the difficulty as normal, and characters may attempt LOGIV checks until they have reached the target number of successes (typically three successes). Chemistry is a classic example of a very simple use of the extended task mechanism.\r\n\r\nChemistry is an acceptable way to accomplish many tasks, even if other methods are available. A locked door can be picked or hacked by a burglar, or a chemist might attempt to open it by melting the lock with acid. The difficulty of the task does not change—if it’s a Difficult [16] task to pick the lock, then it’s a Difficult [16] chemical task also.\r\n",
      "labels": [
        "WOIN",
        "Skill"
      ],
      "tagSymbol": "~",
      "tagValue": "Skill - Chemistry"
    },
    {
      "rawText": "",
      "rawPublic": "# Skill - Engineering\r\nCommon skills: engineering, physics, demolitions, mechanics.\r\n\r\nSometimes colloquially referred to as “doing a science”, engineering is a simple extended task. Using LOGIC and various scientific skills, characters can accomplish a variety of things. Any character can attempt to invoke science in order to solve a problem or achieve a goal.\r\n\r\nThe player(s) start by declaring their intentions. This goal may be anything they wish, although they may find some goals too hard to accomplish. It might be to repair a starship, bypass a cell door, or build an explosive. The GM sets the difficulty as normal, and characters may attempt LOGIC checks until they have reached the target number of successes (typically three successes). The complexity and duration of the task are established by the GM as normal. Engineering is a classic example of a very simple use of the extended task mechanism.\r\n\r\nSome situations require predefined engineering tasks. For example, when a ship falls out of FTL, a minor engineering task is required.\r\n\r\nScience is an acceptable way to accomplish most tasks, even if other methods are available. A locked door can be picked or hacked by a burglar, or an engineer might attempt to open it using her scientific prowess. The difficulty of the task does not change – if it’s a Difficult [16] task to hack the electronic lock, then it’s a Difficult [16] engineering task also.\r\n",
      "labels": [
        "WOIN",
        "Skill"
      ],
      "tagSymbol": "~",
      "tagValue": "Skill - Engineering"
    },
    {
      "rawText": "",
      "rawPublic": "# Skill - Hacking Computing\r\nCommon skills: computers, cryptology.\r\n\r\nHacking is a non-opposed quick or hourly extended task. Three checks are made against a difficulty benchmark set by the GM. The time required varies, but 1-minute increments are usually appropriate for common civilian systems, and 1-hour increments for hardened or military systems. Hacking gains access to a computerized system, allowing the hacker to obtain information, conduct surveillance, or to control electronic systems.\r\n\r\nHacking does not enable control of mechanoid creatures unless that creature’s description specifically indicates otherwise.\r\n\r\nHacking can also not be used to access bank accounts or gain funds. Funds in the far future are usually carried in cred-chips rather than centralized systems after it was discovered in the 21st Century that the latter were far too vulnerable, especially in the face of advanced technology.\r\n\r\nSuggested difficulty benchmarks for hacking computer systems are shown below. Note that starship control computers (see Space) have their own e-DEFENSE scores which are used as the difficulty number to attack the system. The difficulty benchmarks below are the e-DEFENSE scores of common computer types.\r\n",
      "labels": [
        "WOIN",
        "Skill"
      ],
      "tagSymbol": "~",
      "tagValue": "Skill - Hacking Computing"
    },
    {
      "rawText": "",
      "rawPublic": "# Skill - Herbalism\r\nCommon skills: medicine, herbalism\r\n\r\nMuch like alchemy, herbalism is a type of fantasy science. It’s a simple extended task which works in exactly the same way as an alchemical task, but it uses different skills as it is largely focused on medical situations. Like alchemy, it is based on LOGIV. Herbalism can be used to remove permanent conditions, treat diseases, or perform other medical tasks. See the [Alchemy section](/rules-of-the-game/skill-tasks/alchemy) for details on how to adjudicate this type of task.\r\n\r\nLike alchemical concoctions, herbs can also be used to inflict conditions, thus creating a love potion or a sleep draught. The herb must be delivered (imbibed by the target, or similar). A herb which is eaten or drunk is an hourly task, a poultice, salve, or ointment is a daily task, and a gas, incense, or smoke is a weekly task. The check is a simple opposed one vs. the target’s Defense or Mental Defense, and success inflicts a condition, with a critical success inflicting a severe condition.\r\n",
      "labels": [
        "WOIN",
        "Skill"
      ],
      "tagSymbol": "~",
      "tagValue": "Skill - Herbalism"
    },
    {
      "rawText": "",
      "rawPublic": "# Skill - Interrogations\r\nCommon skills: interrogation, bluffing, intimidation, persuasion, seduction.\r\n\r\nAn interrogation is an opposed extended task. The goal is to extract information from a subject. Unlike many extended tasks, an interrogation can continue indefinitely. However, each time a questioner loses an opposed check, the task complexity increases from quick to hourly to daily, and so on, meaning that the time required gets longer and longer.\r\n\r\nA simple interrogation involves CHA vs. WIL checks, along with the interrogation skill. That skill is used to both conduct and withstand interrogation. Each time the interrogator makes a check, they ask a question. If they win the opposed check, the subject answers truthfully; if they fail, the subject lies or refuses to answer, and the complexity of the task incceases by one stage.\r\n\r\nThe answer can be no more than a short sentence – the interrogator can’t ask “Whatis your entire plan, in full detail?” The GMshould hide the subject’s die rolls; theinterrogator does not know if the subjectis lying (unless they have a relevant psionic power or an interrogation kit).\r\n\r\nIn modern or future settings, interrogation kits indicate when a subject is lying (although the subject may make an opposed CHA vs. INT check, using the bluffing skill if they have it, to deceive the interrogation kit), as well as granting possible bonuses to checks. Some drugs can also obviate the need for an interrogation, or prevent the subject from lying. Of course, a subject cannot reveal information they do not have.\r\n\r\nEach use of an interrogation kit causes 1d6 damage to the subject.\r\n\r\nMore advanced interrogations may use other skills, including persuasion, bluffing, even seduction.\r\n",
      "labels": [
        "WOIN",
        "Skill"
      ],
      "tagSymbol": "~",
      "tagValue": "Skill - Interrogations"
    },
    {
      "rawText": "",
      "rawPublic": "# Skill - Medicine\r\nCommon skills: medicine, chemistry, biology, zoology, psychology, genetics, nanotechnology, xenobiology.\r\n\r\nMuch like engineering, medicine is a type of science. It’s a simple extended task which works in exactly the same way as an engineering task, but it uses a variety of medical skills. Like engineering, it is based on LOGIC. [Curing a disease](/injury-death/diseases) is a type of medical task.\r\n\r\nLike chemical concoctions, drugs can also be used to inflict conditions, thus creating a truth drug or a sleeping draught. The drug must be delivered (imbibed by the target, or similar). A drug which is injected, eaten or drunk is an hourly task, a poultice, salve, or ointment costs –1d6, and a gas, incense, or smoke costs –2d6. The check is a simple opposed one versus the target’s Vital Defense, and success inflicts a condition with a critical success inflicting a severe condition.\r\n",
      "labels": [
        "WOIN",
        "Skill"
      ],
      "tagSymbol": "~",
      "tagValue": "Skill - Medicine"
    },
    {
      "rawText": "",
      "rawPublic": "# Skill - Scanning\r\nCommon skills: computers, medicine, chemistry, biology, mining.\r\n\r\nUsing a scanner is a simple, single-check task. Characters can use a hand-held scanner to obtain information about a target or the surroundings. All scanners operate in a similar way, although starship sensors (which are essentially giant scanner arrays with immense range) are dealt with in more detail [here](/space/sensors). Basic use of a scanner uses the computers skill, but subject-specific skills like medicine or chemistry can also be used to reveal detailed information.\r\n\r\nWhen operating a scanner, the character may ask one closed question which the GM will answer. The question must fall within the equipment’s area of focus (a medical scanner can’t detect mineral deposits, and a mining scanner can’t diagnose an illness, for example), but other than that any question may be asked. Each question is one use of the scanner, and takes one action.\r\n\r\nTo use a scanner, make a Routine [10] LOG check. Scanners have a 10’ range increment, much like a weapon’s range increment; each increment inflicts a -1d6 die penalty to the dice pool. High quality scanners, of course, add to the dice pool, as do related skills. Before using the scanner, the user must set the scanning range, which determines the dice pool penalty if there is one. The penalty applies to all scans made at that range setting, even if the information gathered pertains to something closer. The scanner will not reveal information about things beyond that range.\r\n\r\nMedical scanner. These scanners only provide information about biological and medical issues. They can be used to diagnose a disease, or provide information about a lifeform. Medical scanners can use any medical or bio skills – medicine, biology, zoology, genetics, zoology, xenobiology, or even psychology.\r\n\r\nMining scanner. Also known as geological scanners, these scanners provide information about substances and structures. They analyse chemicals, minerals, and materials. Mining scanners can use skills like mining, chemistry, and geology. Mining scanners are also used by archeologists.\r\n\r\nScientific scanner. These scanners provide information about energy, substances, and life-forms, but cannot be used to diagnose illnesses. Scientific scanners can use a variety of scientific skills.\r\n\r\nTactical scanner. These scanners only provide information on the number, type, and location of nearby life-forms. They are used for tactical purposes. They are more robust than other scanners. Tactical scanners use the tactics skill (which additionally means that high quality tactical scanners can add to INITIATIVE rolls).\r\n\r\nQuestions asked while using a scanner must be specific closed questions which the GM can answer in a single, short sentence. More detailed information is obtained or narrowed down by asking a series of questions. Any question within the remit of a scanner is allowed, as long as it is specific and can be answered with a single, short sentence. A typical scan sequence may look like this:\r\n\r\n1. Presence of energy sources, life-forms, or substances within range.\r\n\r\n2. Direction and approximate distance.\r\n\r\n3. Type or composition.\r\n\r\n4. More precise data.\r\n\r\nImpediments. There are various impediments to scanning attempts. Things like thick stone, shields, or severe atmospheric conditions, can each impose the standard -1d6 penalty to the attempt (as do range increments).\r\n\r\nLonger range scans. A normal scan takes one round. A longer range scan can be attempted. This takes one minute, and allows the user to multiply the range increment by 10. However, the amount of detail available becomes less granular; questions asked can only be answered with “yes” or “no”.\r\n\r\nScanning creatures. When receiving information about a creature, the answer to a question may be relayed in game mechanics rather than natural English. This is a convenient way to communicate complex data and biological information to a player. It is therefore perfectly reasonable to ask “What is the reptile’s STRENGTH attribute?” and get the answer “14”, or “How much damage does its acid blood do?” and be told “2d6”. The actual data on the scanning device is far more complicated, but this is a useful abstraction.\r\n",
      "labels": [
        "WOIN",
        "Skill"
      ],
      "tagSymbol": "~",
      "tagValue": "Skill - Scanning"
    },
    {
      "rawText": "",
      "rawPublic": "# Skill - Tailing\r\nA simple tailing scenario is an opposed extended task which involves INT checks for the target, and AGI checks for the pursuer (the reverse of the tracking process). The pursuer is the one trying to stay out of sight and not be spotted by their target. The target will use perception, while the pursuer may use stealth or bluffing. This assumes that the target is trying to be inconspicuous or use anti-surveillance techniques. If the target is not worried about a tail, simply use INT (perception) checks.\r\n\r\n- Change appearance (disguise vs. perception)\r\n- Blend with a crowd (stealth vs. perception)\r\n",
      "labels": [
        "WOIN",
        "Skill"
      ],
      "tagSymbol": "~",
      "tagValue": "Skill - Tailing"
    },
    {
      "rawText": "",
      "rawPublic": "# Skill - Tracking\r\nCommon skills: tracking, stealth, perception, local knowledge.\r\n\r\nTracking someone is an opposed extended task similar to a chase, although much less energetic and more cerebral. Rather than physical tasks, opposed checks are more focused around a contest of mind and skill. The target tries to hide their tracks, while the pursuer tries to uncover them.\r\n\r\nA simple tracking scenario involves involves AGI checks for the target and INT checks for the pursuer, along with the stealth and tracking skills, respectively.\r\n\r\nThis assumes that the target is aware of and trying to shake off the trackers. If the target is unaware of the trackers, simply use a Routine [10] benchmark and a simple extended task.\r\n\r\nA more complex tracking scenario allows the target to try different things such as:\r\n\r\n- Cross a river to hide tracks (swimming vs. tracking)\r\n- Create a decoy or false trail (tracking vs. tracking)\r\n- Hide (stealth vs. tracking)\r\n- Outpace the trackers (running vs. tracking)\r\n",
      "labels": [
        "WOIN",
        "Rule"
      ],
      "tagSymbol": "~",
      "tagValue": "Skill - Tracking"
    }
  ],
  "logs": []
}